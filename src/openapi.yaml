openapi: 3.0.0
info:
  title: Tankman API
  version: 1.0.0
  description: API for managing tanks and measurements
servers:
  - url: /
    description: Local server
paths:
  /tanks:
    get:
      summary: Get all tanks
      responses:
        '200':
          description: A list of tanks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TankResponse'
    post:
      summary: Create a new tank
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TankRequest'
      responses:
        '200':
          description: The created tank
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TankResponse'
  /tanks/{id}:
    get:
      summary: Get a tank by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The tank with the specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TankResponse'
    put:
      summary: Update a tank by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TankRequest'
      responses:
        '200':
          description: The updated tank
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TankResponse'
    delete:
      summary: Delete a tank by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Tank deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /measurements:
    get:
      summary: Get all measurements
      responses:
        '200':
          description: A list of measurements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MeasurementResponse'
    post:
      summary: Create a new measurement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeasurementRequest'
      responses:
        '200':
          description: The created measurement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasurementResponse'
  /measurements/{id}:
    get:
      summary: Get a measurement by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The measurement with the specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasurementResponse'
    put:
      summary: Update a measurement by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeasurementRequest'
      responses:
        '200':
          description: The updated measurement
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasurementResponse'
    delete:
      summary: Delete a measurement by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Measurement deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /data/latestmeasurementbytankid/{id}:
    get:
      summary: Get the latest measurement by tank ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The latest measurement for the specified tank
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasurementResponse'
  /data/allmeasurementsbytankid/{id}:
    get:
      summary: Get all measurements by tank ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: All measurements for the specified tank
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MeasurementResponse'
  /data/livemeasurementbytankid/{id}:
    get:
      summary: Get a live measurement by tank ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A live measurement for the specified tank
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LiveMeasurementResponse'
  /health/status:
    get:
      summary: Health check
      responses:
        '200':
          description: Health check status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatusResponse'
  /settings:
    get:
      summary: Get all settings
      responses:
        '200':
          description: A list of settings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SettingResponse'
    post:
      summary: Create a new setting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingRequest'
      responses:
        '200':
          description: The created setting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingResponse'
  /settings/{name}:
    get:
      summary: Get a setting by name
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The setting with the specified name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingResponse'
    put:
      summary: Update a setting by name
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SettingRequest'
      responses:
        '200':
          description: The updated setting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettingResponse'
    delete:
      summary: Delete a setting by name
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Setting deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /settings/schedulerEnabled:
    get:
      summary: Get scheduler enabled status
      responses:
        '200':
          description: Scheduler enabled status
          content:
            application/json:
              schema:
                type: object
                properties:
                  enabled:
                    type: boolean
    put:
      summary: Set scheduler enabled status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
      responses:
        '200':
          description: Scheduler enabled status updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /settings/schedulerInterval:
    get:
      summary: Get scheduler interval
      responses:
        '200':
          description: Scheduler interval
          content:
            application/json:
              schema:
                type: object
                properties:
                  interval:
                    type: integer
    put:
      summary: Set scheduler interval
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                interval:
                  type: integer
      responses:
        '200':
          description: Scheduler interval updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
components:
  schemas:
    HealthStatusResponse:
      type: object
      properties:
        uptime:
          type: number
        message:
          type: string
        date:
          type: string
          format: date-time
    TankResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        location:
          type: string
        diameter:
          type: number
        height:
          type: number
        sensorDistanceWhenFull:
          type: number
        sensorId:
          type: number
        statedCapacity:
          type: number
        capacityUnit:
          type: string
        isRound:
          type: boolean
        timeStamp:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    MeasurementResponse:
      type: object
      properties:
        id:
          type: integer
        tankId:
          type: integer
        distanceFromSensor:
          type: number
        availableCapacity:
          type: number
        availablePercentage:
          type: number
        timeStamp:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    LiveMeasurementResponse:
      type: object
      properties:
        tankId:
          type: integer
        distanceFromSensor:
          type: number
        availableCapacity:
          type: number
        availablePercentage:
          type: number
        timeStamp:
          type: string
          format: date-time
    TankRequest:
      type: object
      properties:
        name:
          type: string
        location:
          type: string
        diameter:
          type: number
        height:
          type: number
        sensorDistanceWhenFull:
          type: number
        sensorId:
          type: number
        statedCapacity:
          type: number
        capacityUnit:
          type: string
        isRound:
          type: boolean
        timeStamp:
          type: string
          format: date-time
    MeasurementRequest:
      type: object
      properties:
        tankId:
          type: integer
        distanceFromSensor:
          type: number
        availableCapacity:
          type: number
        availablePercentage:
          type: number
        timeStamp:
          type: string
          format: date-time
    SettingResponse:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        value:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    SettingRequest:
      type: object
      properties:
        name:
          type: string
        value:
          type: string